// Code generated by MockGen. DO NOT EDIT.
// Source: ./logger.go

// Package mock_logger is a generated GoMock package.
package mock_logger

import (
	reflect "reflect"

	sarama "github.com/IBM/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockproducerOps is a mock of producerOps interface.
type MockproducerOps struct {
	ctrl     *gomock.Controller
	recorder *MockproducerOpsMockRecorder
}

// MockproducerOpsMockRecorder is the mock recorder for MockproducerOps.
type MockproducerOpsMockRecorder struct {
	mock *MockproducerOps
}

// NewMockproducerOps creates a new mock instance.
func NewMockproducerOps(ctrl *gomock.Controller) *MockproducerOps {
	mock := &MockproducerOps{ctrl: ctrl}
	mock.recorder = &MockproducerOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproducerOps) EXPECT() *MockproducerOpsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockproducerOps) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockproducerOpsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockproducerOps)(nil).Close))
}

// SendSyncMessage mocks base method.
func (m *MockproducerOps) SendSyncMessage(message *sarama.ProducerMessage) (int32, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSyncMessage", message)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendSyncMessage indicates an expected call of SendSyncMessage.
func (mr *MockproducerOpsMockRecorder) SendSyncMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSyncMessage", reflect.TypeOf((*MockproducerOps)(nil).SendSyncMessage), message)
}

// SendSyncMessages mocks base method.
func (m *MockproducerOps) SendSyncMessages(messages []*sarama.ProducerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSyncMessages", messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSyncMessages indicates an expected call of SendSyncMessages.
func (mr *MockproducerOpsMockRecorder) SendSyncMessages(messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSyncMessages", reflect.TypeOf((*MockproducerOps)(nil).SendSyncMessages), messages)
}
