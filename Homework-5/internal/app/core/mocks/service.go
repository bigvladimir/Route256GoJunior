// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_core is a generated GoMock package.
package mock_core

import (
	context "context"
	orders "homework/internal/app/orders"
	pvz "homework/internal/app/pvz"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCoreOps is a mock of CoreOps interface.
type MockCoreOps struct {
	ctrl     *gomock.Controller
	recorder *MockCoreOpsMockRecorder
}

// MockCoreOpsMockRecorder is the mock recorder for MockCoreOps.
type MockCoreOpsMockRecorder struct {
	mock *MockCoreOps
}

// NewMockCoreOps creates a new mock instance.
func NewMockCoreOps(ctrl *gomock.Controller) *MockCoreOps {
	mock := &MockCoreOps{ctrl: ctrl}
	mock.recorder = &MockCoreOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreOps) EXPECT() *MockCoreOpsMockRecorder {
	return m.recorder
}

// AddPvz mocks base method.
func (m *MockCoreOps) AddPvz(ctx context.Context, input pvz.PvzInput) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPvz", ctx, input)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPvz indicates an expected call of AddPvz.
func (mr *MockCoreOpsMockRecorder) AddPvz(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPvz", reflect.TypeOf((*MockCoreOps)(nil).AddPvz), ctx, input)
}

// DeletePvz mocks base method.
func (m *MockCoreOps) DeletePvz(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePvz", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePvz indicates an expected call of DeletePvz.
func (mr *MockCoreOpsMockRecorder) DeletePvz(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePvz", reflect.TypeOf((*MockCoreOps)(nil).DeletePvz), ctx, id)
}

// GetCustomerOrderList mocks base method.
func (m *MockCoreOps) GetCustomerOrderList(ctx context.Context, pvzID, customerID, limit int, isInStock bool) ([]orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerOrderList", ctx, pvzID, customerID, limit, isInStock)
	ret0, _ := ret[0].([]orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerOrderList indicates an expected call of GetCustomerOrderList.
func (mr *MockCoreOpsMockRecorder) GetCustomerOrderList(ctx, pvzID, customerID, limit, isInStock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerOrderList", reflect.TypeOf((*MockCoreOps)(nil).GetCustomerOrderList), ctx, pvzID, customerID, limit, isInStock)
}

// GetPvzByID mocks base method.
func (m *MockCoreOps) GetPvzByID(ctx context.Context, id int64) (pvz.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvzByID", ctx, id)
	ret0, _ := ret[0].(pvz.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvzByID indicates an expected call of GetPvzByID.
func (mr *MockCoreOpsMockRecorder) GetPvzByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvzByID", reflect.TypeOf((*MockCoreOps)(nil).GetPvzByID), ctx, id)
}

// GetRefundList mocks base method.
func (m *MockCoreOps) GetRefundList(ctx context.Context, pvzID, pageNum, pageSize int) ([]orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefundList", ctx, pvzID, pageNum, pageSize)
	ret0, _ := ret[0].([]orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefundList indicates an expected call of GetRefundList.
func (mr *MockCoreOpsMockRecorder) GetRefundList(ctx, pvzID, pageNum, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefundList", reflect.TypeOf((*MockCoreOps)(nil).GetRefundList), ctx, pvzID, pageNum, pageSize)
}

// GiveOrderToCustomer mocks base method.
func (m *MockCoreOps) GiveOrderToCustomer(ctx context.Context, pvzID int, orderID []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveOrderToCustomer", ctx, pvzID, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GiveOrderToCustomer indicates an expected call of GiveOrderToCustomer.
func (mr *MockCoreOpsMockRecorder) GiveOrderToCustomer(ctx, pvzID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveOrderToCustomer", reflect.TypeOf((*MockCoreOps)(nil).GiveOrderToCustomer), ctx, pvzID, orderID)
}

// ModifyPvz mocks base method.
func (m *MockCoreOps) ModifyPvz(ctx context.Context, input pvz.Pvz) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyPvz", ctx, input)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyPvz indicates an expected call of ModifyPvz.
func (mr *MockCoreOpsMockRecorder) ModifyPvz(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyPvz", reflect.TypeOf((*MockCoreOps)(nil).ModifyPvz), ctx, input)
}

// ReturnOrderToCourier mocks base method.
func (m *MockCoreOps) ReturnOrderToCourier(ctx context.Context, pvzID, orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrderToCourier", ctx, pvzID, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrderToCourier indicates an expected call of ReturnOrderToCourier.
func (mr *MockCoreOpsMockRecorder) ReturnOrderToCourier(ctx, pvzID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrderToCourier", reflect.TypeOf((*MockCoreOps)(nil).ReturnOrderToCourier), ctx, pvzID, orderID)
}

// TakeOrderFromCourier mocks base method.
func (m *MockCoreOps) TakeOrderFromCourier(ctx context.Context, order orders.OrderInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeOrderFromCourier", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeOrderFromCourier indicates an expected call of TakeOrderFromCourier.
func (mr *MockCoreOpsMockRecorder) TakeOrderFromCourier(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeOrderFromCourier", reflect.TypeOf((*MockCoreOps)(nil).TakeOrderFromCourier), ctx, order)
}

// TakeRefundFromCustomer mocks base method.
func (m *MockCoreOps) TakeRefundFromCustomer(ctx context.Context, pvzID, customerID, orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeRefundFromCustomer", ctx, pvzID, customerID, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeRefundFromCustomer indicates an expected call of TakeRefundFromCustomer.
func (mr *MockCoreOpsMockRecorder) TakeRefundFromCustomer(ctx, pvzID, customerID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeRefundFromCustomer", reflect.TypeOf((*MockCoreOps)(nil).TakeRefundFromCustomer), ctx, pvzID, customerID, orderID)
}

// UpdatePvz mocks base method.
func (m *MockCoreOps) UpdatePvz(ctx context.Context, input pvz.Pvz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePvz", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePvz indicates an expected call of UpdatePvz.
func (mr *MockCoreOpsMockRecorder) UpdatePvz(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePvz", reflect.TypeOf((*MockCoreOps)(nil).UpdatePvz), ctx, input)
}
